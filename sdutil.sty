%%
%% This is file `sdutil.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% showdata.dtx  (with options: `sdutil')
%% 
%% Copyright (C) 2020 Li Changkai <lichangkai225@qq.com>
%% 
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in:
%% 
%% http://www.latex-project.org/lppl.txt
%% 
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 
\def\myfileversion{1.0}
\def\myfiledate{2020/10/12}
\RequirePackage[calc]{datetime2}
\RequirePackage{expl3}
\ProvidesExplPackage
  { sdutil }
  { \myfiledate }
  { \myfileversion }
  { Provide common functions for showdata }
\newcount\l__sdutil_date_diff
\bool_new:N \l__sdutil_review_bool
\cs_generate_variant:Nn \seq_set_split:Nnn { Nno }
\prg_generate_conditional_variant:Nnn \seq_if_in:Nn { Nx, cx } { T, F, TF, p }
\prg_generate_conditional_variant:Nnn \clist_if_in:Nn { Nx, cx } { T, F, TF, p }
\cs_new_protected:Npn \sdutil_parse_kv:w #1=#2\sd_nil
  {
    \tl_clear_new:N \l__sdutil_tmpa_tl
    \tl_clear_new:N \l__sdutil_tmpb_tl
    \tl_set:Nn \l__sdutil_tmpa_tl { #1 }
    \tl_set:Nn \l__sdutil_tmpb_tl { #2 }
  }
\cs_new_protected:Nn \sdutil_get_kv:nNN
  {
    \sdutil_parse_kv:w #1\sd_nil
    \tl_set_eq:NN #2 \l__sdutil_tmpa_tl
    \tl_set_eq:NN #3 \l__sdutil_tmpb_tl
  }
\cs_new_protected:Nn \sdutil_do_kv:nn
  {
    \cs_set_protected:Npn \__sdutil_do_kv_code:nn ##1 ##2 { #2 }
    \cs_generate_variant:Nn \__sdutil_do_kv_code:nn { VV }
    \sdutil_parse_kv:w #1\rv_nil
    \__sdutil_do_kv_code:VV \l__sdutil_tmpa_tl \l__sdutil_tmpb_tl
  }
\cs_generate_variant:Nn \sdutil_do_kv:nn { nx, xn, xx }
\cs_new_protected:Nn \sdutil_do_kv_variable:nNNn
  {
    \cs_set_protected:Npn \__sdutil_do_kv_variable_code: { #4 }
    \sdutil_parse_kv:w #1\rv_nil
    \tl_clear_new:N #2
    \tl_clear_new:N #3
    \tl_set_eq:NN #2 \l__sdutil_tmpa_tl
    \tl_set_eq:NN #3 \l__sdutil_tmpb_tl
    \__sdutil_do_kv_variable_code:
  }
\cs_new_protected:Nn \sdutil_seq_append_clist:Nn
  {
    \seq_clear_new:N \l__sdutil_tmpa_seq
    \seq_set_from_clist:Nn \l__sdutil_tmpa_seq { #2 }
    \seq_concat:NNN #1 #1 \l__sdutil_tmpa_seq
  }
\cs_generate_variant:Nn \sdutil_seq_append_clist:Nn { cn }
\cs_new_protected:Nn \sdutil_seq_gappend_clist:Nn
  {
    \seq_clear_new:N \l__sdutil_tmpa_seq
    \seq_set_from_clist:Nn \l__sdutil_tmpa_seq { #2 }
    \seq_gconcat:NNN #1 #1 \l__sdutil_tmpa_seq
  }
\cs_generate_variant:Nn \sdutil_seq_gappend_clist:Nn { cn }
\prg_new_conditional:Nnn \sdutil_if_review:Nnn { T, F, TF, p }
  {
    \DTMsavedate{recent}{#2}
    \DTMsavedate{today}{#3}
    \DTMsaveddatediff{today}{recent}{\l__sdutil_date_diff}% specious blank
    \bool_set_false:N \l__sdutil_review_bool
    \seq_if_in:NxTF #1 { \the\l__sdutil_date_diff }
      { \prg_return_true: }
      { \prg_return_false: }
  }
\prg_generate_conditional_variant:Nnn \sdutil_if_review:Nnn { cnn } { T, F, TF, p }
\cs_new_protected:Nn \sdutil_regex_replace_all:nnnN
  {
    \tl_set:Nn #4 { #3 }
    \regex_replace_all:nnN { #1 } { #2 } #4
  }
\cs_new_protected:Nn \sdutil_set_msg_cs:n
  {
    \str_if_in:nnTF { #1 } { = }
      { \sdutil_get_kv:nNN { #1 } }
      { \sdutil_get_kv:nNN { #1=#1 } }
    \l_tmpa_tl \l_tmpb_tl
    \regex_replace_all:nnN { - } { _ } \l_tmpb_tl
    \cs_gset_protected:cn { __\l_tmpb_tl _msg_new:nn }
      {
        \exp_args:NV \msg_new:nnn \l_tmpa_tl { ##1 } { ##2 }
      }
    \cs_gset_protected:cn { __\l_tmpb_tl _msg_new:nnn }
      {
        \exp_args:NV \msg_new:nnnn \l_tmpa_tl { ##1 } { ##2 } { ##3 }
      }
    \clist_map_inline:nn { fatal, critical, error, warning, info, log, none }
      {
        \__sdutil_set_msg_issue_cs:VVn \l_tmpa_tl \l_tmpb_tl { ##1 }
      }
    \cs_gset:Nn \msg_fatal_text:n { Package~ ##1~ Error }
    \cs_gset:Nn \msg_critical_text:n { Package~ ##1~ Error }
  }
\cs_new_protected:Nn \__sdutil_set_msg_issue_cs:nnn
  {
    \cs_gset_protected:cn { __#2_msg_#3:n }
      {
        \cs_if_exist_use:c { msg_#3:nn } { #1 } { ##1 }
      }
    \cs_gset_protected:cn { __#2_msg_#3:nn }
      {
        \cs_if_exist_use:c { msg_#3:nnn } { #1 } { ##1 } { ##2 }
      }
    \cs_gset_protected:cn { __#2_msg_#3:nnn }
      {
        \cs_if_exist_use:c { msg_#3:nnnn } { #1 } { ##1 } { ##2 } { ##3 }
      }
    \cs_gset_protected:cn { __#2_msg_#3:nnnn }
      {
        \cs_if_exist_use:c { msg_#3:nnnnn } { #1 } { ##1 }
          { ##2 } { ##3 } { ##4 }
      }
    \cs_gset_protected:cn { __#2_msg_#3:nnnnn }
      {
        \cs_if_exist_use:c { msg_#3:nnnnnn } { #1 } { ##1 }
          { ##2 } { ##3 } { ##4 } { ##5 }
      }
    \cs_generate_variant:cn { __#2_msg_#3:nn } { nx }
    \cs_generate_variant:cn { __#2_msg_#3:nnn } { nxx }
    \cs_generate_variant:cn { __#2_msg_#3:nnnn } { nxxx }
    \cs_generate_variant:cn { __#2_msg_#3:nnnnn } { nxxxx }
  }
\cs_generate_variant:Nn \__sdutil_set_msg_issue_cs:nnn { VVn }
\cs_set_eq:NN \IfBlankTF \tl_if_blank:nTF
\cs_set_eq:NN \IfBlankT \tl_if_blank:nT
\cs_set_eq:NN \IfBlankF \tl_if_blank:nF
\endinput
%%
%% End of file `sdutil.sty'.
